{
  "id": "variables",
  "title": "Vari√°veis",
  "description": "Como declarar e usar vari√°veis em Go",
  "category": "B√°sicos",
  "tags": ["vari√°veis", "var", "declara√ß√£o", "tipos"],
  "instruction": "# Vari√°veis em Go\n\n## Por que vari√°veis s√£o importantes?\n\nVari√°veis s√£o **containers** que armazenam dados na mem√≥ria. Em Go, voc√™ tem m√∫ltiplas formas de declar√°-las, cada uma com seu prop√≥sito espec√≠fico.\n\n## 4 Formas de Declarar Vari√°veis\n\n### 1. Declara√ß√£o Expl√≠cita (`var` + tipo)\n```go\nvar nome string = \"Maria\"\nvar idade int = 25\n```\n- **Mais verbosa**, mas **clara**\n- Boa para iniciantes\n- √ötil quando o tipo n√£o √© √≥bvio\n\n### 2. Declara√ß√£o com Infer√™ncia (`var`)\n```go\nvar cidade = \"S√£o Paulo\"  // Go infere que √© string\nvar ativo = true          // Go infere que √© bool\n```\n- Go **automaticamente deduz** o tipo\n- Mais limpa que a forma 1\n- Ainda usa a palavra-chave `var`\n\n### 3. Declara√ß√£o Curta (`:=`)\n```go\naltura := 1.75    // float64\npeso := 70.5      // float64\n```\n- **Mais concisa** e popular\n- ‚ö†Ô∏è **Apenas dentro de fun√ß√µes**\n- Go infere o tipo automaticamente\n\n### 4. M√∫ltiplas Vari√°veis\n```go\n// Com var\nvar a, b, c int = 1, 2, 3\n\n// Com declara√ß√£o curta  \nx, y := 10, 20\n```\n- Declara v√°rias de uma vez\n- √ötil para valores relacionados\n\n## Tipos B√°sicos em Go\n\n| Tipo | Exemplo | Uso |\n|------|---------|-----|\n| `string` | `\"Hello\"` | Texto |\n| `int` | `42` | N√∫meros inteiros |\n| `float64` | `3.14` | N√∫meros decimais |\n| `bool` | `true/false` | Verdadeiro/Falso |\n\n## Zero Values (Valores Padr√£o)\n\nQuando voc√™ declara uma vari√°vel sem inicializar:\n- `string` ‚Üí `\"\"` (string vazia)\n- `int` ‚Üí `0`\n- `float64` ‚Üí `0.0`\n- `bool` ‚Üí `false`\n\n## Boas Pr√°ticas\n\n‚úÖ **Use declara√ß√£o curta** (`:=`) na maioria dos casos\n‚úÖ **Nomes descritivos**: `nomeUsuario` melhor que `n`\n‚úÖ **CamelCase**: `idadeUsuario`, `precoTotal`\n‚ùå **Evite** `var` quando o tipo √© √≥bvio\n\n## Experimente\n\n- Mude os valores das vari√°veis\n- Adicione novas vari√°veis de tipos diferentes\n- Teste o c√°lculo do IMC modificando altura/peso\n- Experimente declarar sem inicializar para ver os \"zero values\"\n\n---\n*üí° Dica: Prefira := para vari√°veis locais, var para globais ou quando o tipo n√£o √© √≥bvio!*",
  "code": "package main\n\nimport \"fmt\"\n\nfunc main() {\n    // 1. Declara√ß√£o com var (tipo expl√≠cito)\n    var nome string = \"Maria\"\n    var idade int = 25\n    \n    // 2. Declara√ß√£o com var (tipo inferido)\n    var cidade = \"S√£o Paulo\"\n    var ativo = true\n    \n    // 3. Declara√ß√£o curta (apenas dentro de fun√ß√µes)\n    altura := 1.75\n    peso := 70.5\n    \n    // 4. M√∫ltiplas vari√°veis\n    var a, b, c int = 1, 2, 3\n    x, y := 10, 20\n    \n    // Imprimindo as vari√°veis\n    fmt.Println(\"Nome:\", nome)\n    fmt.Println(\"Idade:\", idade)\n    fmt.Println(\"Cidade:\", cidade)\n    fmt.Println(\"Ativo:\", ativo)\n    fmt.Println(\"Altura:\", altura)\n    fmt.Printf(\"IMC: %.2f\\n\", peso/(altura*altura))\n    fmt.Println(\"N√∫meros:\", a, b, c)\n    fmt.Println(\"Coordenadas:\", x, y)\n}"
}