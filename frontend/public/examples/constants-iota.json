{
  "id": "constants-iota",
  "title": "Constantes e Iota",
  "description": "Constantes tipadas, iota e bit flags",
  "category": "B√°sicos",
  "tags": ["constantes", "iota", "bit flags", "const"],
  "instruction": "# Constantes e Iota em Go\n\n## Por que usar constantes?\n\nConstantes s√£o valores **imut√°veis** definidos em tempo de compila√ß√£o. Go oferece recursos poderosos para trabalhar com constantes.\n\n## Tipos de Constantes\n\n### 1. Constantes Tipadas vs Untyped\n```go\nconst PI float64 = 3.14159  // Tipada (float64)\nconst EMPRESA = \"BrolinGo\"   // Untyped (string)\nconst VERSAO = 1             // Untyped (numeric)\n```\n\n**Untyped constants** s√£o mais flex√≠veis - podem ser usadas em diferentes contextos sem convers√£o expl√≠cita.\n\n### 2. O Poder do `iota`\n\n`iota` √© um **contador autom√°tico** que come√ßa em 0 e incrementa a cada linha:\n\n```go\nconst (\n    Segunda = iota  // 0\n    Terca           // 1  \n    Quarta          // 2\n    Quinta          // 3\n)\n```\n\n### 3. Iota com Express√µes\n```go\nconst (\n    KB = 1 << (10 * iota)  // 1024^0 = 1\n    MB                      // 1024^1 = 1024\n    GB                      // 1024^2 = 1048576\n)\n```\n\n### 4. Bit Flags com Iota\n\nPerfeito para **permiss√µes** e **estados**:\n\n```go\nconst (\n    Leitura    = 1 << iota  // 001 = 1\n    Escrita                 // 010 = 2  \n    Execucao                // 100 = 4\n)\n\n// Combina√ß√µes\nconst LeituraEscrita = Leitura | Escrita  // 011 = 3\n```\n\n## Vantagens das Constantes\n\n‚úÖ **Performance**: Substitu√≠das em tempo de compila√ß√£o\n‚úÖ **Type Safety**: Evita n√∫meros m√°gicos\n‚úÖ **Manutenibilidade**: Mudan√ßa em um local\n‚úÖ **Legibilidade**: C√≥digo autodocumentado\n\n## Padr√µes Comuns\n\n### Status/Estados\n```go\nconst (\n    Pending = iota\n    Processing  \n    Completed\n    Failed\n)\n```\n\n### Configura√ß√µes\n```go\nconst (\n    DEBUG = true\n    PORT = 8080\n    TIMEOUT = 30 * time.Second\n)\n```\n\n## Dicas Importantes\n\n‚ö†Ô∏è **Iota reseta** a cada bloco `const`\n‚ö†Ô∏è **Pule valores** com `_` se necess√°rio\n‚ö†Ô∏è **Use bit flags** para combina√ß√µes de estados\n\n## Experimente\n\n- Modifique os valores das constantes\n- Teste opera√ß√µes bitwise com as flags\n- Adicione novas constantes com iota\n- Observe como iota incrementa automaticamente\n\n---\n*üí° Dica: Use constantes para valores que nunca mudam durante a execu√ß√£o!*",
  "code": "package main\n\nimport \"fmt\"\n\n// Constantes simples\nconst PI = 3.14159\nconst EMPRESA = \"BrolinGo Software\"\n\n// Constantes com iota (dias da semana)\nconst (\n    Domingo = iota\n    Segunda\n    Terca\n    Quarta\n    Quinta\n    Sexta\n    Sabado\n)\n\n// Iota com express√µes (tamanhos de arquivo)\nconst (\n    B  = 1 << (10 * iota) // 1\n    KB                    // 1024\n    MB                    // 1048576\n    GB                    // 1073741824\n)\n\n// Bit flags (permiss√µes)\nconst (\n    Leitura  = 1 << iota // 1 (001)\n    Escrita              // 2 (010)\n    Execucao             // 4 (100)\n)\n\n// Combina√ß√µes de permiss√µes\nconst (\n    LeituraEscrita = Leitura | Escrita          // 3 (011)\n    Completo       = Leitura | Escrita | Execucao // 7 (111)\n)\n\n// Status de pedido\nconst (\n    Pendente = iota + 1 // Come√ßar em 1\n    Processando\n    Concluido\n    Cancelado\n)\n\nfunc main() {\n    fmt.Println(\"=== CONSTANTES B√ÅSICAS ===\\n\")\n    fmt.Printf(\"œÄ = %.5f\\n\", PI)\n    fmt.Printf(\"Empresa: %s\\n\", EMPRESA)\n    \n    fmt.Println(\"\\n=== DIAS DA SEMANA (iota) ===\\n\")\n    fmt.Printf(\"Domingo: %d\\n\", Domingo)\n    fmt.Printf(\"Segunda: %d\\n\", Segunda)\n    fmt.Printf(\"Sexta: %d\\n\", Sexta)\n    fmt.Printf(\"S√°bado: %d\\n\", Sabado)\n    \n    fmt.Println(\"\\n=== TAMANHOS (iota com express√µes) ===\\n\")\n    fmt.Printf(\"1 KB = %d bytes\\n\", KB)\n    fmt.Printf(\"1 MB = %d bytes\\n\", MB)\n    fmt.Printf(\"1 GB = %d bytes\\n\", GB)\n    \n    fmt.Println(\"\\n=== PERMISS√ïES (bit flags) ===\\n\")\n    fmt.Printf(\"Leitura: %d (bin√°rio: %03b)\\n\", Leitura, Leitura)\n    fmt.Printf(\"Escrita: %d (bin√°rio: %03b)\\n\", Escrita, Escrita)\n    fmt.Printf(\"Execu√ß√£o: %d (bin√°rio: %03b)\\n\", Execucao, Execucao)\n    \n    fmt.Println(\"\\n=== COMBINA√á√ïES ===\\n\")\n    fmt.Printf(\"Leitura+Escrita: %d (bin√°rio: %03b)\\n\", LeituraEscrita, LeituraEscrita)\n    fmt.Printf(\"Completo: %d (bin√°rio: %03b)\\n\", Completo, Completo)\n    \n    // Testando permiss√µes\n    minhaPermissao := Leitura | Execucao // 5 (101)\n    fmt.Printf(\"\\nMinha permiss√£o: %d (bin√°rio: %03b)\\n\", minhaPermissao, minhaPermissao)\n    \n    // Verificando se tem permiss√£o de leitura\n    temLeitura := minhaPermissao&Leitura != 0\n    temEscrita := minhaPermissao&Escrita != 0\n    \n    fmt.Printf(\"Tem leitura? %t\\n\", temLeitura)\n    fmt.Printf(\"Tem escrita? %t\\n\", temEscrita)\n    \n    fmt.Println(\"\\n=== STATUS ===\\n\")\n    fmt.Printf(\"Pendente: %d\\n\", Pendente)\n    fmt.Printf(\"Processando: %d\\n\", Processando)\n    fmt.Printf(\"Conclu√≠do: %d\\n\", Concluido)\n    fmt.Printf(\"Cancelado: %d\\n\", Cancelado)\n}"
}